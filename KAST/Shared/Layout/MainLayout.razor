@using KAST.Authentication
@using KAST.Constants

@inherits LayoutComponentBase


@inject IStringLocalizer<Resource> localizer
@inject LayoutService LayoutService
@inject AuthenticationStateProvider authStateProvider
@inject NavigationManager navManager

<MudThemeProvider Theme="@LayoutService.CurrentTheme" IsDarkMode="@LayoutService.IsDarkMode" />
<MudDialogProvider />
<MudSnackbarProvider />

<AuthorizeView Roles="Admin, OwnerAdmin, User, Moderate">
   <Authorized>
    <MudLayout>
        <MudAppBar Style="background: --mud-palette-appbar-background" Elevation="10" Dense="true">
            <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start" OnClick="@((e) => DrawerToggle())" />
                <div Class="d-flex flex-grow-1">             
                    <div class="flex-grow-1" />
                    <div Class="flex-none d-flex justify-end align-center  ">
                        <div Class="flex-none d-flex justify-end " style="width:250px">
                            <KAST.Pages.Component.CultureSelector />
                        </div>
                       
                        <div class="mr-5" />
                        <MudAvatar Size="Size.Medium">
                            <MudImage Src="images/mony.jpg"></MudImage>
                        </MudAvatar>

                        <MudMenu Class="mt-20" Label="@context.User.Identity.Name" Variant="Variant.Text" Color="Color.Inherit" ActivationEvent="@MouseEvent.MouseOver">
                            <ChildContent>
                                <MudMenuItem>Profile</MudMenuItem>
                                <MudMenuItem>Theme</MudMenuItem>
                                <MudMenuItem>Usage</MudMenuItem>
                                <MudMenuItem OnClick="LogOut">Sign Out</MudMenuItem>
                            </ChildContent>
                        </MudMenu>
                       <MudIconButton Icon="@Icons.Material.Filled.MoreVert" Color="Color.Inherit" Edge="Edge.End" />
                    </div>
                </div>
        </MudAppBar>

        <MudDrawer @bind-Open="_drawerOpen" Elevation="15 ">
            <MudDrawerHeader Style="">
                <MudImage Src="image/logo_white_sh.png" Width="200" Height="80"></MudImage>
            </MudDrawerHeader>

            <NavMenu />
        </MudDrawer>
        <MudMainContent>
            <MudContainer MaxWidth="MaxWidth.ExtraExtraLarge" Class="my-6">
                @Body
            </MudContainer>
        </MudMainContent>
    </MudLayout>
    </Authorized>
    <NotAuthorized>
        <KAST.Pages.Auth.Login/>
    </NotAuthorized>

</AuthorizeView>
    



@code {
    bool _drawerOpen = true;
    private MudTheme _theme = new MudTheme
    {
            PaletteDark = new PaletteDark()
            {
                Primary = "rgba(0, 106,172, 1)",
                
            },
            Palette = new PaletteLight()
            {
                Primary = "rgba(0, 106,172, 1)",
                AppbarBackground = "rgba(0,0,0, 1)",
                
            },
            LayoutProperties = new LayoutProperties()
            {
                DefaultBorderRadius = "10px"
            }

    };
    private bool _isDarkMode;

    protected override void OnInitialized()
    {
        _theme.LayoutProperties.DefaultBorderRadius = "0";

        LayoutService.MajorUpdateOccured += LayoutServiceOnMajorUpdateOccured;
        LayoutService.SetBaseTheme(Theme.ApplicationTheme());

    }

    void DrawerToggle()
    {
        _drawerOpen = !_drawerOpen;
    }

    private async Task LogOut()
    {
        var customAuthStateProvider = (CustomAuthenticationStateProvider)authStateProvider;
        await customAuthStateProvider.UpdateAuthenticationState(null);
        navManager.NavigateTo("/", true);
    }

    private void LayoutServiceOnMajorUpdateOccured(object? sender, EventArgs e)
    {
        StateHasChanged();
    }
}