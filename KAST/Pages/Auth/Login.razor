@page "/Login"
@using KAST.Authentication
@using KAST.Domain.Entities
@using KAST.Infratructure.Servcies;
@using System.ComponentModel.DataAnnotations

@inject ISnackbar SnackbarService
@inject UserAccountService userAccountService
@inject AuthenticationStateProvider authStateProvider
@inject NavigationManager navManager

<PageTitle>Anmeldung</PageTitle>

<div class="d-flex flex-column gap-y-3">
    <div class="d-flex flex-column">
        <EditForm Model="model" method="post" OnValidSubmit="@Authenticate" FormName="login">
            <DataAnnotationsValidator/>
            <MudText Typo="Typo.h4" GutterBottom="true">Anmelden</MudText>
            <MudText>
                Du hast keinen Account? <MudLink Href="" Target="_self">Register</MudLink>
            </MudText>
            <StatusMessage Message="Error" Error="true"/>
            <div class="mud-input-control mud-input-input-control my-4">
                <div class="mud-input-control-input-container">
                    <!--!--><!--!-->
                    <div class="mud-input mud-input-outlined mud-shrink">
                        <InputText @bind-Value="model.Username" class="mud-input-slot mud-input-root mud-input-root-outlined" type="text" autocomplete="@model.Username" aria-required="true" placeholder="user name"/>
                        <div class="mud-input-slot mud-input-root mud-input-root-outlined" style="display:none"></div>
                        <!--!-->
                        <div class="mud-input-outlined-border"></div>
                    </div>
                    <!--!-->
                    <label class="mud-input-label mud-input-label-animated mud-input-label-outlined mud-input-label-inputcontrol" for="userName">Benutzername</label>
                </div>
                <div class="mud-input-helper-text mud-input-error">
                    <div class="d-flex">
                        <ValidationMessage For="() => model.Username" class="mud-input-error"/>
                    </div>
                </div>
            </div>
            <div class="mud-input-control mud-input-input-control my-4">
                <div class="mud-input-control-input-container">
                    <!--!--><!--!-->
                    <div class="mud-input mud-input-outlined mud-shrink">
                        <InputText type="password" @bind-Value="model.Password" class="mud-input-slot mud-input-root mud-input-root-outlined" autocomplete="current-password" aria-required="true" placeholder="password"/>
                        <div class="mud-input-slot mud-input-root mud-input-root-outlined" style="display:none"></div>
                        <!--!-->
                        <div class="mud-input-outlined-border"></div>
                    </div>
                    <!--!-->
                    <label class="mud-input-label mud-input-label-animated mud-input-label-outlined mud-input-label-inputcontrol" for="password">Passwort</label>
                </div>
                <div class="mud-input-helper-text mud-input-error">
                    <div class="d-flex">
                        <ValidationMessage For="() => model.Password" class="mud-input-error"/>
                    </div>
                </div>
            </div>
            <div Class="d-flex justify-space-between align-center mb-1">
                <label class="form-label">
                    <InputCheckbox @bind-Value="model.RememberMe" class="form-check-input"/>
                   Login merken
                </label>
                <MudLink Href="">Password vergessen</MudLink>
            </div>

            <MudButton Variant="Variant.Filled"
                       Color="Color.Primary"
                       Size="Size.Large"
                       ButtonType="ButtonType.Submit"
                       FullWidth="true">
                <MudText>Anmelden</MudText>
            </MudButton>
        </EditForm>

    </div>
    <div class="d-flex flex-column">

        <ExternalLoginPicker/>

    </div>
</div>

@code {
    private class Model
    {
        public string? Username { get; set; }
        public string? Password { get; set; }
        public bool RememberMe { get; set; }
    }

    private Model model = new Model();

    private async Task Authenticate()
    {
        var userAccount = userAccountService.GetByUserName(model.Username);
        if (userAccount == null || userAccount.Password != model.Password)
        {
            SnackbarService.Add("Invaild Username oder Password");
            return;
        }

        var cutomAuthStateProvider = (CustomAuthenticationStateProvider)authStateProvider;
        await cutomAuthStateProvider.UpdateAuthenticationState(new UserSession
            {
                Username = userAccount.Username,
                Role = userAccount.Role
            });
        navManager.NavigateTo("/", true);
    }


}