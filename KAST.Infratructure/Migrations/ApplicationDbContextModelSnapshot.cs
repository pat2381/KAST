// <auto-generated />
using System;
using KAST.Infratructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace KAST.Infratructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.5");

            modelBuilder.Entity("KAST.Domain.Entities.Author", b =>
                {
                    b.Property<Guid>("AuthorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset>("Delete")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("URL")
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset>("Updated")
                        .HasColumnType("TEXT");

                    b.HasKey("AuthorId");

                    b.ToTable("Authors");
                });

            modelBuilder.Entity("KAST.Domain.Entities.Faction", b =>
                {
                    b.Property<Guid>("FactionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset>("Delete")
                        .HasColumnType("TEXT");

                    b.Property<string>("Flag")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset>("Updated")
                        .HasColumnType("TEXT");

                    b.Property<int>("UseSide")
                        .HasColumnType("INTEGER");

                    b.HasKey("FactionId");

                    b.ToTable("Factions");
                });

            modelBuilder.Entity("KAST.Domain.Entities.Fireteam", b =>
                {
                    b.Property<Guid>("FireteamId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset>("Delete")
                        .HasColumnType("TEXT");

                    b.Property<int>("Index")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("InviteOnly")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<bool>("RestrictTeamCompoition")
                        .HasColumnType("INTEGER");

                    b.Property<int>("SlotsCount")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("SquadId")
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset>("Updated")
                        .HasColumnType("TEXT");

                    b.HasKey("FireteamId");

                    b.HasIndex("SquadId");

                    b.ToTable("Fireteams");
                });

            modelBuilder.Entity("KAST.Domain.Entities.Mission", b =>
                {
                    b.Property<Guid>("MissionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset>("Delete")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("TEXT");

                    b.Property<string>("MissionBriefingLink")
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset>("MissionDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("RuleLink")
                        .HasColumnType("TEXT");

                    b.Property<string>("ShortDescription")
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset>("StartDate")
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset>("StartTime")
                        .HasColumnType("TEXT");

                    b.Property<int>("State")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Template")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset>("Updated")
                        .HasColumnType("TEXT");

                    b.Property<string>("Worldanme")
                        .HasColumnType("TEXT");

                    b.HasKey("MissionId");

                    b.ToTable("Missions");
                });

            modelBuilder.Entity("KAST.Domain.Entities.MissionUser", b =>
                {
                    b.Property<Guid>("MissionUserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset>("Delete")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("MissionID")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("SquadID")
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset>("Updated")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("UserID")
                        .HasColumnType("TEXT");

                    b.HasKey("MissionUserId");

                    b.HasIndex("MissionID");

                    b.HasIndex("SquadID");

                    b.HasIndex("UserID");

                    b.ToTable("MissionUsers");
                });

            modelBuilder.Entity("KAST.Domain.Entities.Mod", b =>
                {
                    b.Property<Guid>("ModId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<ulong>("ActualSize")
                        .HasColumnType("INTEGER");

                    b.Property<Guid?>("AuthorId")
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset>("Delete")
                        .HasColumnType("TEXT");

                    b.Property<ulong?>("ExpectedSize")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsLocal")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("LocalLastUpdated")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Path")
                        .HasColumnType("TEXT");

                    b.Property<int?>("Status")
                        .HasColumnType("INTEGER");

                    b.Property<ulong>("SteamID")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("SteamLastUpdated")
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset>("Updated")
                        .HasColumnType("TEXT");

                    b.Property<string>("Url")
                        .HasColumnType("TEXT");

                    b.HasKey("ModId");

                    b.HasIndex("AuthorId");

                    b.ToTable("Mods");
                });

            modelBuilder.Entity("KAST.Domain.Entities.Server", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("InstallPath")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Servers");
                });

            modelBuilder.Entity("KAST.Domain.Entities.Slot", b =>
                {
                    b.Property<Guid>("SlotId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset>("Delete")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("FireteamID")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsValideted")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Label")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("MissionUserID")
                        .HasColumnType("TEXT");

                    b.Property<int?>("Role")
                        .HasColumnType("INTEGER");

                    b.Property<int>("SlotNumber")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("Timestamp")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset>("Updated")
                        .HasColumnType("TEXT");

                    b.HasKey("SlotId");

                    b.HasIndex("FireteamID");

                    b.HasIndex("MissionUserID");

                    b.ToTable("Slots");
                });

            modelBuilder.Entity("KAST.Domain.Entities.Squad", b =>
                {
                    b.Property<Guid>("SquadId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset>("Delete")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("FactionID")
                        .HasColumnType("TEXT");

                    b.Property<int>("GameSide")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MaxUsuerCount")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("MissionID")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<int>("Number")
                        .HasColumnType("INTEGER");

                    b.Property<int>("SquadPolicy")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset>("Updated")
                        .HasColumnType("TEXT");

                    b.HasKey("SquadId");

                    b.HasIndex("FactionID");

                    b.HasIndex("MissionID");

                    b.ToTable("Squads");
                });

            modelBuilder.Entity("KAST.Domain.Entities.User", b =>
                {
                    b.Property<Guid>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset>("Delete")
                        .HasColumnType("TEXT");

                    b.Property<string>("EMail")
                        .HasColumnType("TEXT");

                    b.Property<string>("ImagePath")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("LastLogin")
                        .HasColumnType("TEXT");

                    b.Property<int>("MissionCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Password")
                        .HasColumnType("TEXT");

                    b.Property<ulong>("SteamID")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SteamName")
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset>("Updated")
                        .HasColumnType("TEXT");

                    b.Property<string>("Username")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("KAST.Domain.Entities.Fireteam", b =>
                {
                    b.HasOne("KAST.Domain.Entities.Squad", "Squad")
                        .WithMany("Fireteams")
                        .HasForeignKey("SquadId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Squad");
                });

            modelBuilder.Entity("KAST.Domain.Entities.MissionUser", b =>
                {
                    b.HasOne("KAST.Domain.Entities.Mission", "Mission")
                        .WithMany("Users")
                        .HasForeignKey("MissionID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("KAST.Domain.Entities.Squad", "Side")
                        .WithMany("MissionUsers")
                        .HasForeignKey("SquadID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("KAST.Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Mission");

                    b.Navigation("Side");

                    b.Navigation("User");
                });

            modelBuilder.Entity("KAST.Domain.Entities.Mod", b =>
                {
                    b.HasOne("KAST.Domain.Entities.Author", "Author")
                        .WithMany("mods")
                        .HasForeignKey("AuthorId");

                    b.Navigation("Author");
                });

            modelBuilder.Entity("KAST.Domain.Entities.Slot", b =>
                {
                    b.HasOne("KAST.Domain.Entities.Fireteam", "Fireteam")
                        .WithMany("Slots")
                        .HasForeignKey("FireteamID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("KAST.Domain.Entities.MissionUser", "AssignedUser")
                        .WithMany("Slots")
                        .HasForeignKey("MissionUserID");

                    b.Navigation("AssignedUser");

                    b.Navigation("Fireteam");
                });

            modelBuilder.Entity("KAST.Domain.Entities.Squad", b =>
                {
                    b.HasOne("KAST.Domain.Entities.Faction", "Faction")
                        .WithMany("Squads")
                        .HasForeignKey("FactionID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("KAST.Domain.Entities.Mission", "Mission")
                        .WithMany("squads")
                        .HasForeignKey("MissionID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Faction");

                    b.Navigation("Mission");
                });

            modelBuilder.Entity("KAST.Domain.Entities.Author", b =>
                {
                    b.Navigation("mods");
                });

            modelBuilder.Entity("KAST.Domain.Entities.Faction", b =>
                {
                    b.Navigation("Squads");
                });

            modelBuilder.Entity("KAST.Domain.Entities.Fireteam", b =>
                {
                    b.Navigation("Slots");
                });

            modelBuilder.Entity("KAST.Domain.Entities.Mission", b =>
                {
                    b.Navigation("Users");

                    b.Navigation("squads");
                });

            modelBuilder.Entity("KAST.Domain.Entities.MissionUser", b =>
                {
                    b.Navigation("Slots");
                });

            modelBuilder.Entity("KAST.Domain.Entities.Squad", b =>
                {
                    b.Navigation("Fireteams");

                    b.Navigation("MissionUsers");
                });
#pragma warning restore 612, 618
        }
    }
}
